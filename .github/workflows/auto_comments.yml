name: Auto-comment on PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  comment:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
      PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      PR_ID: ${{ github.event.pull_request.number }}
      PR_BRANCH: ${{ github.event.pull_request.head.ref }}
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_URL: ${{ github.event.pull_request.html_url }}
      PR_BODY: ${{ github.event.pull_request.body }}
      DEBUG: "false"

    steps:
      # ========== SETUP PHASE ==========
      - name: 🛠️ Prepare Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: 🛡️ Validate Input Data
        run: |
          if [[ -z "$REPO" || -z "$PR_ID" || -z "$PR_BRANCH" || -z "$GITHUB_TOKEN" ]]; then
            echo "::error::Missing required environment variables"
            exit 1
          fi

      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      # ========== PROJECT DETECTION ==========
      - name: 🔍 Detect Project Type
        id: detect-project
        run: |
          detect_project() {
            if [ -f "yarn.lock" ]; then
              echo "node-yarn"
            elif [ -f "package.json" ]; then
              echo "node"
            elif [ -f "pom.xml" ]; then
              echo "maven"
            elif [ -f "build.gradle" ]; then
              echo "gradle"
            elif [ -f "requirements.txt" ]; then
              echo "python"
            else
              echo "unknown"
            fi
          }

          PROJECT_TYPE=$(detect_project)
          echo "PROJECT_TYPE=$PROJECT_TYPE" >> $GITHUB_ENV

          case $PROJECT_TYPE in
            node-yarn)
              echo "BUILD_COMMAND=yarn install" >> $GITHUB_ENV
              echo "TEST_COMMAND=yarn test" >> $GITHUB_ENV
              echo "LINT_COMMAND=yarn lint" >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=yarn.lock" >> $GITHUB_ENV
              ;;
            node)
              echo "BUILD_COMMAND=npm install" >> $GITHUB_ENV
              echo "TEST_COMMAND=npm test" >> $GITHUB_ENV
              echo "LINT_COMMAND=npm run lint" >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=package-lock.json" >> $GITHUB_ENV
              ;;
            maven|gradle|python)
              # Commands for other project types
              ;;
            *)
              echo "BUILD_COMMAND=echo 'No build command'" >> $GITHUB_ENV
              ;;
          esac

      # ========== ENVIRONMENT SETUP ==========
      - name: ⚙️ Setup Node.js
        if: ${{ contains(env.PROJECT_TYPE, 'node') }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # ========== DEPENDENCY MANAGEMENT ==========
      - name: 🔑 Prepare Cache
        run: |
          case $PROJECT_TYPE in
            node*)
              echo "CACHE_PATH=~/.npm" >> $GITHUB_ENV
              ;;
            maven)
              echo "CACHE_PATH=~/.m2/repository" >> $GITHUB_ENV
              ;;
            gradle)
              echo "CACHE_PATH=~/.gradle" >> $GITHUB_ENV
              ;;
            python)
              echo "CACHE_PATH=~/.cache/pip" >> $GITHUB_ENV
              ;;
          esac

      - name: 🗄️ Cache Dependencies
        if: env.PROJECT_TYPE != 'unknown'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ env.PROJECT_TYPE }}-${{ hashFiles(env.DEPENDENCY_FILE) }}

      # ========== BUILD & TEST ==========
      - name: 🛠️ Build & Test
        run: |
          max_retries=3
          retry_command() {
            local cmd=$1
            local attempt=0
            until eval "$cmd"; do
              ((attempt++))
              if [[ $attempt -ge $max_retries ]]; then
                echo "Command failed after $max_retries attempts"
                return 1
              fi
              echo "Retrying... ($attempt/$max_retries)"
              sleep 5
            done
          }

          retry_command "$BUILD_COMMAND"
          retry_command "$TEST_COMMAND"

      # ========== CODE QUALITY ==========
      - name: 🧹 Lint Code
        if: env.PROJECT_TYPE != 'unknown'
        run: ${{ env.LINT_COMMAND }}

      # ========== GATHER DATA ==========
      - name: 📊 Collect Metadata
        run: |
          echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: 📌 Get PR Details
        id: pr-details
        run: |
          PR_LABELS=$(jq -r '.pull_request.labels[].name' "$GITHUB_EVENT_PATH" | tr '\n' ', ')
          echo "PR_LABELS=${PR_LABELS%,}" >> $GITHUB_ENV

      # ========== NOTIFICATION ==========
      - name: 💬 Post PR Comment
        env:
          COMMENT_TITLE: "## 🤖 Automated PR Analysis"
        run: |
          COMMENT_BODY=$(cat <<EOF
          $COMMENT_TITLE
          **Author**: @$PR_AUTHOR
          **Status**: ${{ job.status }}

          ### 📝 Summary
          - Tests: ${{ env.TEST_STATUS || 'Not executed' }}
          - Linting: ${{ env.LINT_STATUS || 'Not executed' }}
          - Coverage: ${{ env.COVERAGE || 'N/A' }}

          [View Details]($PR_URL)
          EOF
          )

          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/issues/$PR_ID/comments" \
            -d "{\"body\":\"$COMMENT_BODY\"}"

      # ========== DEBUGGING ==========
      - name: 🐛 Debug Info
        if: env.DEBUG == 'true'
        run: |
          echo "===== ENVIRONMENT ====="
          env | sort
          echo "===== FILE SYSTEM ====="
          du -h -d 2
