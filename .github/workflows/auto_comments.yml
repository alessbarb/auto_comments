name: Auto-comment on PR

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  comment:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      REPO: "${{ github.repository }}"
      PR_AUTHOR: "${{ github.event.pull_request.user.login }}"
      PR_ID: "${{ github.event.pull_request.number }}"
      PR_BRANCH: "${{ github.event.pull_request.head.ref }}"
      PR_TITLE: "${{ github.event.pull_request.title }}"
      PR_URL: "${{ github.event.pull_request.html_url }}"
      PR_BODY: "${{ github.event.pull_request.body }}"
      DEBUG: "false"

    steps:
      # (1) Verificar/instalar jq y curl solo si faltan
      - name: üõ†Ô∏è Prepare Dependencies
        run: |
          echo "Checking jq and curl..."
          which jq || sudo apt-get update && sudo apt-get install -y jq
          which curl || sudo apt-get update && sudo apt-get install -y curl

      # (2) Validar datos de entrada
      - name: üõ°Ô∏è Validate Input Data
        run: |
          echo "Validating input data: REPO=$REPO, PR_ID=$PR_ID, PR_BRANCH=$PR_BRANCH"
          if [[ -z "$REPO" || -z "$PR_ID" || -z "$PR_BRANCH" ]]; then
            echo "Invalid input data. REPO, PR_ID, or PR_BRANCH is empty."
            exit 1
          fi
          if [[ -z "$GITHUB_TOKEN" ]]; then
            echo "GITHUB_TOKEN is empty. Cannot proceed."
            exit 1
          fi
          echo "Input data validated successfully."

      # (3) Checkout
      - name: üì• Checkout Code
        uses: actions/checkout@v3

      # (4) Detectar tipo de proyecto y comandos
      - name: üîç Detect Project Type
        id: detect
        run: |
          echo "Detecting project type..."

          if [ -f "yarn.lock" ]; then
            echo "PROJECT_TYPE=node-yarn" >> $GITHUB_ENV
            echo "BUILD_COMMAND='yarn install'" >> $GITHUB_ENV
            echo "TEST_COMMAND='yarn test'" >> $GITHUB_ENV
            echo "LINT_COMMAND='yarn lint'" >> $GITHUB_ENV
            echo "DEPENDENCY_FILE='yarn.lock'" >> $GITHUB_ENV
            echo "CACHE_PATH='~/.cache/yarn'" >> $GITHUB_ENV
          elif [ -f "package.json" ]; then
            echo "PROJECT_TYPE=node" >> $GITHUB_ENV
            echo "BUILD_COMMAND='npm install'" >> $GITHUB_ENV
            echo "TEST_COMMAND='npm test'" >> $GITHUB_ENV
            echo "LINT_COMMAND='npm run lint'" >> $GITHUB_ENV
            echo "DEPENDENCY_FILE='package-lock.json'" >> $GITHUB_ENV
            echo "CACHE_PATH='~/.npm'" >> $GITHUB_ENV
          elif [ -f "pom.xml" ]; then
            echo "PROJECT_TYPE=maven" >> $GITHUB_ENV
            echo "BUILD_COMMAND='mvn clean package'" >> $GITHUB_ENV
            echo "TEST_COMMAND='mvn test'" >> $GITHUB_ENV
            echo "LINT_COMMAND='mvn checkstyle:check'" >> $GITHUB_ENV
            echo "DEPENDENCY_FILE='pom.xml'" >> $GITHUB_ENV
            echo "CACHE_PATH='~/.m2/repository'" >> $GITHUB_ENV
          elif [ -f "build.gradle" ]; then
            echo "PROJECT_TYPE=gradle" >> $GITHUB_ENV
            echo "BUILD_COMMAND='gradle build'" >> $GITHUB_ENV
            echo "TEST_COMMAND='gradle test'" >> $GITHUB_ENV
            echo "LINT_COMMAND='gradle check'" >> $GITHUB_ENV
            echo "DEPENDENCY_FILE='build.gradle'" >> $GITHUB_ENV
            echo "CACHE_PATH='~/.gradle'" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ]; then
            echo "PROJECT_TYPE=python" >> $GITHUB_ENV
            echo "BUILD_COMMAND='pip install -r requirements.txt'" >> $GITHUB_ENV
            echo "TEST_COMMAND='pytest'" >> $GITHUB_ENV
            echo "LINT_COMMAND='flake8 .'" >> $GITHUB_ENV
            echo "DEPENDENCY_FILE='requirements.txt'" >> $GITHUB_ENV
            echo "CACHE_PATH='~/.cache/pip'" >> $GITHUB_ENV
          else
            echo "PROJECT_TYPE=unknown" >> $GITHUB_ENV
            echo "BUILD_COMMAND='echo \"No build command (unknown project type)\"'" >> $GITHUB_ENV
            echo "TEST_COMMAND='echo \"No test command (unknown project type)\"'" >> $GITHUB_ENV
            echo "LINT_COMMAND='echo \"No lint command (unknown project type)\"'" >> $GITHUB_ENV
            echo "DEPENDENCY_FILE=''" >> $GITHUB_ENV
            echo "CACHE_PATH=''" >> $GITHUB_ENV

      # (4.1) Prepara variables para el cache
      - name: üîë Prepare Cache Key
        id: prepare-cache
        run: |
          PROJECT_TYPE="${PROJECT_TYPE}"
          DEPENDENCY_FILE="${DEPENDENCY_FILE}"
          CACHE_PATH="${CACHE_PATH}"

          echo "PROJECT_TYPE=$PROJECT_TYPE"
          echo "DEPENDENCY_FILE=$DEPENDENCY_FILE"
          echo "CACHE_PATH=$CACHE_PATH"

          echo "cache-path=$CACHE_PATH" >> $GITHUB_OUTPUT
          echo "dependency-file=$DEPENDENCY_FILE" >> $GITHUB_OUTPUT
        env:
          PROJECT_TYPE: ${{ env.PROJECT_TYPE }}
          DEPENDENCY_FILE: ${{ env.DEPENDENCY_FILE }}
          CACHE_PATH: ${{ env.CACHE_PATH }}

      # (4.2) Cache dependencies
      - name: üóÑÔ∏è Cache Dependencies
        if: env.PROJECT_TYPE != 'unknown'
        uses: actions/cache@v3
        with:
          path: ${{ steps.prepare-cache.outputs.cache-path }}
          key: ${{ runner.os }}-${{ env.PROJECT_TYPE }}-${{ hashFiles(steps.prepare-cache.outputs.dependency-file) }}
        continue-on-error: true

      # Funci√≥n para reintentos de build/test
      - name: üõ°Ô∏è Define Retry Function
        id: define-retry
        run: |
          cat << 'EOF' > retry.sh
          #!/usr/bin/env bash
          retry_command() {
            local -r cmd="$1"
            local -r max_retries="$2"
            local -r wait_time="$3"
            local retry_count=0

            while [[ $retry_count -lt $max_retries ]]; do
              echo "Executing: $cmd ... Attempt $(($retry_count + 1))"
              if eval "$cmd"; then
                return 0
              fi
              retry_count=$((retry_count + 1))
              sleep $wait_time
            done

            echo "Failed to execute '$cmd' after $max_retries attempts."
            return 1
          }
          EOF
          chmod +x retry.sh
        shell: bash

      # (5) Build & Test (con reintentos)
      - name: ‚öôÔ∏è Build & Test
        run: |
          source ./retry.sh

          echo "PROJECT_TYPE=$PROJECT_TYPE"
          if [ "$PROJECT_TYPE" = "unknown" ]; then
            echo "TESTS_SUMMARY='No tests ran (unknown project type)'" >> $GITHUB_ENV
            echo "COVERAGE_REPORT='No coverage (unknown project type)'" >> $GITHUB_ENV
            exit 0
          fi

          # Build con reintentos
          if ! retry_command "${BUILD_COMMAND}" 3 5; then
            echo "Build failed after retries"
            exit 1
          fi

          # Test con reintentos
          if ! retry_command "${TEST_COMMAND}" 3 5; then
            echo "Tests failed after retries"
            exit 1
          fi

          # Ejemplo: coverage en Node
          if [[ "$PROJECT_TYPE" == "node" || "$PROJECT_TYPE" == "node-yarn" ]]; then
            COVERAGE_JSON="./coverage/coverage-summary.json"
            if [ -f "$COVERAGE_JSON" ]; then
              COVERAGE_PCT=$(jq '.total.lines.pct' "$COVERAGE_JSON")
              echo "COVERAGE_REPORT='Coverage: ${COVERAGE_PCT}%'" >> $GITHUB_ENV
            else
              echo "COVERAGE_REPORT='No coverage info found.'" >> $GITHUB_ENV
            fi
          elif [ "$PROJECT_TYPE" == "maven" ]; then
            echo "COVERAGE_REPORT='Example: coverage from Jacoco'" >> $GITHUB_ENV
          elif [ "$PROJECT_TYPE" == "gradle" ]; then
            echo "COVERAGE_REPORT='Example: coverage from Jacoco Gradle'" >> $GITHUB_ENV
          elif [ "$PROJECT_TYPE" == "python" ]; then
            echo "COVERAGE_REPORT='Example: coverage from Pytest --cov'" >> $GITHUB_ENV
          fi

          echo "TESTS_SUMMARY='All tests passed (example)'" >> $GITHUB_ENV
        env:
          PROJECT_TYPE: ${{ env.PROJECT_TYPE }}
          BUILD_COMMAND: ${{ env.BUILD_COMMAND }}
          TEST_COMMAND: ${{ env.TEST_COMMAND }}

      # (6) Lint con falla de pipeline si hay errores
      - name: üßπ Lint
        run: |
          set -e  # fail fast
          if [ "$PROJECT_TYPE" = "unknown" ]; then
            echo "LINTER_RESULTS='No lint (unknown project type)'" >> $GITHUB_ENV
            exit 0
          fi

          eval "$LINT_COMMAND"
          echo "LINTER_RESULTS='Lint passed successfully!'" >> $GITHUB_ENV
        env:
          PROJECT_TYPE: ${{ env.PROJECT_TYPE }}
          LINT_COMMAND: ${{ env.LINT_COMMAND }}

      # (7) Gather commit info
      - name: üîé Gather Commit Info
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      # (8) Gather PR Details
      - name: üìä Gather PR Details
        id: pr_details
        run: |
          source ./retry.sh

          # PR Labels
          PR_LABELS=$(jq -r '.pull_request.labels[]?.name' "$GITHUB_EVENT_PATH" | tr '\n' ', ') || exit 1
          echo "PR_LABELS=$PR_LABELS" >> "$GITHUB_ENV"

          # Changed Files (with retry)
          FILES_JSON=""
          if ! retry_command "FILES_JSON=\$(curl -s -H \"Authorization: token $GITHUB_TOKEN\" https://api.github.com/repos/$REPO/pulls/$PR_ID/files)" 3 5; then
            echo "Failed to retrieve PR files."
            exit 1
          fi

          if [[ -z "$FILES_JSON" ]]; then
            echo "FILES_JSON is empty. Exiting."
            exit 1
          fi

          REPO_URL="https://github.com/$REPO/blob/$PR_BRANCH"
          > files_linked.txt
          for row in $(echo "${FILES_JSON}" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            FILE_NAME=$(_jq '.filename')
            ADDITIONS=$(_jq '.additions')
            DELETIONS=$(_jq '.deletions')
            CHANGES=$(_jq '.changes')

            echo "- [$FILE_NAME]($REPO_URL/$FILE_NAME) (Add: $ADDITIONS, Del: $DELETIONS, Changes: $CHANGES)" >> files_linked.txt
          done

          {
            echo 'FILES_LINKED<<EOF'
            cat files_linked.txt
            echo EOF
          } >> "$GITHUB_ENV"

      # (9) Workflow status
      - name: ‚úîÔ∏è Workflow Status = Success
        if: success()
        run: |
          echo "WORKFLOW_STATUS=success" >> $GITHUB_ENV
          echo "Workflow completed successfully."

      - name: ‚ùå Error Handling (Workflow Status = Failure)
        if: failure()
        run: |
          echo "WORKFLOW_STATUS=failure" >> $GITHUB_ENV
          exit 1

      # (10) Comentar en el PR con Markdown
      - name: üìù Add Comment to PR
        run: |
          FILES_LINKED=$(echo "$FILES_LINKED" | sed -E 's/["‚Äú‚Äù]/\\"/g')

          COMMENT_BODY=$(jq -n \
            --arg pr_author "$PR_AUTHOR" \
            --arg pr_title "$PR_TITLE" \
            --arg pr_url "$PR_URL" \
            --arg pr_body "$PR_BODY" \
            --arg repo "$REPO" \
            --arg pr_labels "$PR_LABELS" \
            --arg workflow_status "$WORKFLOW_STATUS" \
            --arg files_linked "$FILES_LINKED" \
            --arg lint_results "$LINTER_RESULTS" \
            --arg tests_summary "$TESTS_SUMMARY" \
            --arg coverage_report "$COVERAGE_REPORT" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg commit_msg "$COMMIT_MESSAGE" \
            '{
              "body": (
                "Hey @" + $pr_author + ",\n\n" +
                "## üöÄ Pull Request Summary\n" +
                "**Title**: " + $pr_title + "\n" +
                "**URL**: " + $pr_url + "\n" +
                "**Labels**: " + $pr_labels + "\n\n" +
                "<details><summary>Files Changed</summary>\n" +
                $files_linked + "\n</details>\n\n" +
                "### Lint Results\n" + $lint_results + "\n\n" +
                "### Test Summary\n" + $tests_summary + "\n\n" +
                "### Coverage Report\n" + $coverage_report + "\n\n" +
                "**Last Commit SHA**: " + $commit_sha + "\n" +
                "Message: " + $commit_msg + "\n\n" +
                ":sparkles: Please ensure all tests and checks pass.\n" +
                "For more details, see [our contribution guide](https://github.com/" + $repo + "/blob/main/CONTRIBUTING.md)."
              )
            }'
          )

          if [[ -z "$COMMENT_BODY" ]]; then
            echo "Comment body is empty. Aborting."
            exit 1
          fi

          # Truncaci√≥n simple
          if [[ ${#COMMENT_BODY} -gt 65536 ]]; then
            echo "Comment body exceeds 65536 characters. Truncating..."
            COMMENT_BODY="${COMMENT_BODY:0:65532}...)"
          fi

          echo "Posting comment to PR..."
          curl \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$COMMENT_BODY" \
            "https://api.github.com/repos/$REPO/issues/$PR_ID/comments"

          echo "Comment added to PR successfully."

      # (11) Debug logs
      - name: üêõ Debug Logs
        if: env.DEBUG == 'true'
        run: |
          echo "===== DEBUG LOGS ====="
          echo "REPO: $REPO"
          echo "PR_ID: $PR_ID"
          echo "PR_BRANCH: $PR_BRANCH"
          echo "PR_LABELS: $PR_LABELS"
          echo "LINTER_RESULTS: $LINTER_RESULTS"
          echo "TESTS_SUMMARY: $TESTS_SUMMARY"
          echo "COVERAGE_REPORT: $COVERAGE_REPORT"
          echo "COMMIT_SHA: $COMMIT_SHA"
          echo "COMMIT_MESSAGE: $COMMIT_MESSAGE"
          echo "FILES_LINKED: $FILES_LINKED"
          echo "======================"
