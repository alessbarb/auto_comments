name: Auto-comment on PR

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  comment:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO: ${{ github.repository }}
      PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      PR_ID: ${{ github.event.pull_request.number }}
      PR_BRANCH: ${{ github.event.pull_request.head.ref }}
      PR_TITLE: ${{ github.event.pull_request.title }}
      PR_URL: ${{ github.event.pull_request.html_url }}
      PR_BODY: ${{ github.event.pull_request.body }}
      DEBUG: "false"

    steps:
      # ========== SETUP PHASE ==========
      - name: üõ†Ô∏è Prepare Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: üõ°Ô∏è Validate Input Data
        run: |
          if [[ -z "$REPO" || -z "$PR_ID" || -z "$PR_BRANCH" || -z "$GITHUB_TOKEN" ]]; then
            echo "::error::Missing required environment variables"
            exit 1
          fi

      - name: üì• Checkout Code
        uses: actions/checkout@v4

      # ========== PROJECT DETECTION ==========
      - name: üîç Detect Project Type
        id: detect-project
        run: |
          detect_project() {
            if [ -f "yarn.lock" ]; then
              echo "node-yarn"
            elif [ -f "package.json" ]; then
              echo "node"
            elif [ -f "pom.xml" ]; then
              echo "maven"
            elif [ -f "build.gradle" ]; then
              echo "gradle"
            elif [ -f "requirements.txt" ]; then
              echo "python"
            else
              echo "unknown"
            fi
          }

          PROJECT_TYPE=$(detect_project)
          echo "PROJECT_TYPE=$PROJECT_TYPE" >> $GITHUB_ENV

          case $PROJECT_TYPE in
            node-yarn)
              echo "BUILD_COMMAND=yarn install" >> $GITHUB_ENV
              echo "TEST_COMMAND=yarn test" >> $GITHUB_ENV
              echo "LINT_COMMAND=yarn lint" >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=yarn.lock" >> $GITHUB_ENV
              ;;
            node)
              echo "BUILD_COMMAND=npm install" >> $GITHUB_ENV
              echo "TEST_COMMAND=npm test" >> $GITHUB_ENV
              echo "LINT_COMMAND=npm run lint" >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=package-lock.json" >> $GITHUB_ENV
              ;;
            maven)
              echo "BUILD_COMMAND=mvn clean package" >> $GITHUB_ENV
              echo "TEST_COMMAND=mvn test" >> $GITHUB_ENV
              echo "LINT_COMMAND=mvn checkstyle:check" >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=pom.xml" >> $GITHUB_ENV
              ;;
            gradle)
              echo "BUILD_COMMAND=gradle build" >> $GITHUB_ENV
              echo "TEST_COMMAND=gradle test" >> $GITHUB_ENV
              echo "LINT_COMMAND=gradle check" >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=build.gradle" >> $GITHUB_ENV
              ;;
            python)
              echo "BUILD_COMMAND=pip install -r requirements.txt" >> $GITHUB_ENV
              echo "TEST_COMMAND=pytest" >> $GITHUB_ENV
              echo "LINT_COMMAND=flake8 ." >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=requirements.txt" >> $GITHUB_ENV
              ;;
            *)
              echo "BUILD_COMMAND=echo 'No build command (unknown project type)'" >> $GITHUB_ENV
              echo "TEST_COMMAND=echo 'No test command (unknown project type)'" >> $GITHUB_ENV
              echo "LINT_COMMAND=echo 'No lint command (unknown project type)'" >> $GITHUB_ENV
              echo "DEPENDENCY_FILE=" >> $GITHUB_ENV
              ;;
          esac

      # ========== ENVIRONMENT SETUP ==========
      - name: ‚öôÔ∏è Setup Node.js
        if: ${{ contains(env.PROJECT_TYPE, 'node') }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # ========== DEPENDENCY MANAGEMENT ==========
      - name: üîë Prepare Cache
        run: |
          case $PROJECT_TYPE in
            node-yarn)
              echo "CACHE_PATH=~/.cache/yarn" >> $GITHUB_ENV
              ;;
            node)
              echo "CACHE_PATH=~/.npm" >> $GITHUB_ENV
              ;;
            maven)
              echo "CACHE_PATH=~/.m2/repository" >> $GITHUB_ENV
              ;;
            gradle)
              echo "CACHE_PATH=~/.gradle" >> $GITHUB_ENV
              ;;
            python)
              echo "CACHE_PATH=~/.cache/pip" >> $GITHUB_ENV
              ;;
            *)
              echo "CACHE_PATH=" >> $GITHUB_ENV
              ;;
          esac

      - name: üóÑÔ∏è Cache Dependencies
        if: env.PROJECT_TYPE != 'unknown'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ env.PROJECT_TYPE }}-${{ hashFiles(env.DEPENDENCY_FILE) }}

      # ========== BUILD & TEST ==========
      - name: üõ†Ô∏è Build & Test
        run: |
          source ./retry.sh
          if [ "$PROJECT_TYPE" = "unknown" ]; then
            echo "No recognized project files. Skipping build & test."
            echo "TEST_STATUS=No tests executed (unknown project type)" >> $GITHUB_ENV
            echo "COVERAGE=N/A" >> $GITHUB_ENV
            exit 0
          fi

          if ! retry_command "$BUILD_COMMAND" 3 5; then
            echo "Build failed after retries."
            exit 1
          fi

          if ! retry_command "$TEST_COMMAND" 3 5; then
            echo "Tests failed after retries."
            exit 1
          fi

          # Para proyectos Node, intentar obtener resumen de cobertura
          if [[ "$PROJECT_TYPE" == "node" || "$PROJECT_TYPE" == "node-yarn" ]]; then
            COVERAGE_FILE="./coverage/coverage-summary.json"
            if [ -f "$COVERAGE_FILE" ]; then
              COVERAGE_PCT=$(jq '.total.lines.pct' "$COVERAGE_FILE")
              echo "COVERAGE=Coverage: ${COVERAGE_PCT}%" >> $GITHUB_ENV
            else
              echo "COVERAGE=No coverage info found." >> $GITHUB_ENV
            fi
          else
            echo "COVERAGE=N/A" >> $GITHUB_ENV
          fi

          echo "TEST_STATUS=All tests passed" >> $GITHUB_ENV

      # ========== CODE QUALITY ==========
      - name: üßπ Lint Code
        run: |
          if [ "$PROJECT_TYPE" = "unknown" ]; then
            echo "LINT_STATUS=No lint (unknown project type)" >> $GITHUB_ENV
          else
            if eval "$LINT_COMMAND"; then
              echo "LINT_STATUS=Lint passed successfully!" >> $GITHUB_ENV
            else
              echo "LINT_STATUS=Lint errors detected!" >> $GITHUB_ENV
              exit 1
            fi
          fi
          
      # ========== GATHER DATA ==========
      - name: üìä Collect Metadata
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: üìå Get PR Details
        id: pr-details
        run: |
          source ./retry.sh
          PR_LABELS=$(jq -r '.pull_request.labels[]?.name' "$GITHUB_EVENT_PATH" | tr '\n' ', ')
          echo "PR_LABELS=${PR_LABELS%,}" >> $GITHUB_ENV

          FILES_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/$REPO/pulls/$PR_ID/files")
          if [ -z "$FILES_JSON" ]; then
            echo "Failed to retrieve PR files."
            exit 1
          fi

          REPO_URL="https://github.com/$REPO/blob/$PR_BRANCH"
          > files_linked.txt
          for row in $(echo "$FILES_JSON" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${row} | base64 --decode | jq -r ${1}
            }
            FILE_NAME=$(_jq '.filename')
            ADDITIONS=$(_jq '.additions')
            DELETIONS=$(_jq '.deletions')
            CHANGES=$(_jq '.changes')
            echo "- [$FILE_NAME]($REPO_URL/$FILE_NAME) (Additions: $ADDITIONS, Deletions: $DELETIONS, Changes: $CHANGES)" >> files_linked.txt
          done

          FILES_LINKED=$(cat files_linked.txt)
          {
            echo "FILES_LINKED<<EOF"
            echo "$FILES_LINKED"
            echo "EOF"
          } >> $GITHUB_ENV
 
      # ========== NOTIFICATION ==========
      - name: üí¨ Post PR Comment
        env:
          COMMENT_TITLE: "## ü§ñ Automated PR Analysis"
        run: |
          # Escapar comillas y backticks en variables que puedan contener caracteres especiales
          FILES_LINKED_ESCAPED=$(echo "$FILES_LINKED" | sed -E 's/["‚Äú‚Äù]/\\"/g; s/`/¬¥/g')
          PR_BODY_ESCAPED=$(echo "$PR_BODY" | sed -E 's/["‚Äú‚Äù]/\\"/g; s/`/¬¥/g')
          
          COMMENT_BODY=$(jq -n \
            --arg pr_author "$PR_AUTHOR" \
            --arg pr_title "$PR_TITLE" \
            --arg pr_url "$PR_URL" \
            --arg pr_body "$PR_BODY_ESCAPED" \
            --arg pr_labels "$PR_LABELS" \
            --arg workflow_status "${{ job.status }}" \
            --arg files_linked "$FILES_LINKED_ESCAPED" \
            --arg lint_results "$LINT_STATUS" \
            --arg test_summary "$TEST_STATUS" \
            --arg coverage "$COVERAGE" \
            --arg commit_sha "$COMMIT_SHA" \
            --arg commit_msg "$COMMIT_MESSAGE" \
            '{
              body: (
                "Hey @" + $pr_author + ",\n\n" +
                "## üöÄ Pull Request Summary\n" +
                "**Title**: " + $pr_title + "\n" +
                "**PR URL**: " + $pr_url + "\n" +
                "**PR Body**: " + $pr_body + "\n" +
                "**Labels**: " + $pr_labels + "\n" +
                "**Workflow Status**: " + $workflow_status + "\n\n" +
                "### Files Changed\n" + $files_linked + "\n\n" +
                "### Lint Results\n" + $lint_results + "\n\n" +
                "### Test Summary\n" + $test_summary + "\n\n" +
                "### Coverage Report\n" + $coverage + "\n\n" +
                "**Last Commit SHA**: " + $commit_sha + "\n" +
                "**Commit Message**: " + $commit_msg + "\n\n" +
                ":sparkles: Please ensure all tests and checks pass.\n" +
                "[View PR Details](" + $pr_url + ")"
              )
            }')
          
          # Truncar si excede el l√≠mite de GitHub
          if [[ ${#COMMENT_BODY} -gt 65536 ]]; then
            COMMENT_BODY="${COMMENT_BODY:0:65532}...)"
          fi

          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$COMMENT_BODY" \
            "https://api.github.com/repos/$REPO/issues/$PR_ID/comments"

      # ========== DEBUGGING ==========
      - name: üêõ Debug Info
        if: env.DEBUG == 'true'
        run: |
          echo "===== ENVIRONMENT ====="
          env | sort
          echo "===== FILE SYSTEM ====="
          du -h -d 2
